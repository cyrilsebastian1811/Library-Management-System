version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk-stretch
    steps:
      - checkout
      # - run:
      #     name: JAVA 11 installation
      #     command: |
      #       sudo apt install dirmngr
      #       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EA8CACC073C3DB2A
      #       echo "deb http://ppa.launchpad.net/linuxuprising/java/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/linuxuprising-java.list
      #       # sudo apt-get update
      #       # sudo apt-get install oracle-java11-installer-local
      #       # sudo apt-get install oracle-java11-set-default
      #       echo "deb http://ppa.launchpad.net/linuxuprising/java/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/linuxuprising-java.list
      #       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A
      #       sudo apt update
      #       sudo apt install oracle-java11-set-default-local
      #       jdkVersion=$(ls | grep jdk*)
      #       sudo echo -e "JAVA_HOME=\"/usr/lib/jvm/$jdkVersion\"" >> /etc/bash.bashrc
      #       sudo echo -e "PATH=\"$JAVA_HOME/bin:$PATH\"" >> /etc/bash.bashrc
      #       sudo echo "export PATH" >> /etc/bash.bashrc
      # - run:
      #     name: Install packages
      #     command: |
      #       echo $CIRCLE_WORKING_DIRECTORY
      #       sudo apt-get update && sudo apt-get install wget zip unzip -y
      # - run:
      #     name: Install awscli
      #     command: sudo pip install awscli
      - run:
          name: Build WAR
          command: |
            pwd
            cd webapp/
            pwd
            ls -al
            ./mvnw clean install
            cd target
            ls -al
            cd ../..
      - run :
          name  : Zip Artifact
          command : |
            echo "Hello the current build number is ${CIRCLE_BUILD_NUM}"
            pwd
            find . -name appspec.yml
            ls -al
            mkdir -p codedeploy_artifact
            find ./infrastructure/aws/codedeploy/ -name *.sh
            cp infrastructure/aws/codedeploy/*.sh .
            find . -name *.yml
            zip -r csye6225-webapp-${CIRCLE_BUILD_NUM}.zip webapp/target/ROOT.war *.sh *.yml
            ls -al
            mv csye6225-webapp-${CIRCLE_BUILD_NUM}.zip codedeploy_artifact/
            ls -al
            pwd
            cd codedeploy_artifact
            ls -al
            pwd
            cd ..
            pwd
            ls -al
      - run :
          name : Install pip
          command: |
            # sudo rm /etc/apt/sources.list
            # echo "deb http://archive.debian.org/debian/ jessie-backports main" | sudo tee -a /etc/apt/sources.list
            # echo "deb-src http://archive.debian.org/debian/ jessie-backports main" | sudo tee -a /etc/apt/sources.list
            # echo "Acquire::Check-Valid-Until false;" | sudo tee -a /etc/apt/apt.conf.d/10-nocheckvalid
            # echo 'Package: *\nPin: origin "archive.debian.org"\nPin-Priority: 500' | sudo tee -a /etc/apt/preferences.d/10-archive-pin
            # sudo apt-get update
            # sudo apt update
            # echo "Success"
            # sudo apt-get install python3
            # sudo apt-get install dh-python
            # python --version
            # apt-get update
            # sudo apt-get install python3-pip
            # pip3 --version
            sudo apt install python3-pip
      - run :
          name  :   AWS CLI Install 
          command :  sudo pip3 install -y awscli
      - run :
          name : Upload Artifact To S3
          command : |            
            echo "Uploading to S3 bucket"
            cd codedeploy_artifact
            aws s3 cp csye6225-webapp-${CIRCLE_BUILD_NUM}.zip s3://${AWS_CODE_DEPLOY_BUCKET}
      - run :
          name : Make CodeDeploy API call 
          command : |
            echo "CodeDeploy"
            # aws deploy create-deployment --application-name ${applicationName} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${groupName} --s3-location bucket=${bucketName},bundleType=zip,key=csye6225-webapp-${CIRCLE_BUILD_NUM}.zip
            aws deploy register-application-revision --application-name csye6225-webapp \
            --revision revisionType=S3,s3Location={bucket=${AWS_CODE_DEPLOY_BUCKET},key=csye6225-webapp-${CIRCLE_BUILD_NUM}.zip,bundleType=zip} \
            --s3-location bucket=${AWS_CODE_DEPLOY_BUCKET},bundleType=zip,key=csye6225-webapp-${CIRCLE_BUILD_NUM}.zip
            echo "------------------------------------------------------"
            aws deploy list-application-revision --application-name csye6225-webapp \
            --s3-bucket ${AWS_CODE_DEPLOY_BUCKET} --deployed include
            echo "------------------------------------------------------"
            deploymentId=$(aws deploy create-deployment \
            --application-name csye6225-webapp \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name csye6225-webapp-deployment \
            --s3-location bucket=${AWS_CODE_DEPLOY_BUCKET},bundleType=zip,key=csye6225-webapp-${CIRCLE_BUILD_NUM}.zip \
            --auto-rollback-configuration enabled=true,events=DEPLOYMENT_FAILURE,DEPLOYMENT_STOP_ON_ALARM,DEPLOYMENT_STOP_ON_REQUEST)
            echo "$deploymentId"
              
